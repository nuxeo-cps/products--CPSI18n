#!/bin/sh

# $Id$
# Descr: Generate a pot file by parsing the ZPT's
#        As well, en/fr po and custom.pot files
#
# Author: Julien <ja@nuxeo.com>, Encolpe <edegoute@nuxeo.com>


ECHO=echo
PWD=`pwd`
RM=rm
CAT=cat
GREP=grep
MV=mv
CP=cp

if [ -x $ZHOME/$Z_NAME/bin/python ]; then
    PYTHON_BIN=$ZHOME/$Z_NAME/bin/python
else
    PYTHON_BIN=`which python`
fi
if [ ! -d $ZHOME/$Z_NAME/Products ]; then
    PRODUCTS_DIR=$PWD/../..
else
    PRODUCTS_DIR=$ZHOME/$Z_NAME/Products
fi

#
# Query the user for the name he'd like to give
# to the pot file
#
query_name()
{
    $ECHO     "######################################################"
    $ECHO -ne "### Enter the name of the pot file for this product : "
    read POT_FILE_NAME
}

#
# Query the user to confirm the request cause we're
# gonna clean a bit ;)
#
user_sure()
{
    $ECHO "###################################################################"
    $ECHO "### The pot/po files already in the directory are gonna be deleted."
    $ECHO -ne "### Are you sure you wanna continue ? (yes/no)"
    read USER_SURE
    $ECHO
}

#
# Cleaning the old pot/pos files.
# make_pot is an new proper initizalization
#
clean_directory()
{
    $ECHO "######################################################"
    $ECHO "### Cleaning the pot/po files already in the directory"
    $ECHO "######################################################"
    $ECHO
    $RM -rf .config.pot 2> /dev/null
    $RM -rf .blacklist_pot 2> /dev/null
    $RM -rf *.po 2>/dev/null
    $RM -rf *.pot 2> /dev/null
}

#
# Remove the lines within header just generated by
# the i18n_xgettext.py
# It's compulsory since it's not working if not done
# Not neccesarly anymore since the correction I did in
# the OpenPTi18n package.
# No neccesarly anymore.
#
remove_lines()
{
   touch tmp.pot
   $CAT default.pot | grep -v "(and DELETE this one)" > tmp.pot
   $CAT tmp.pot | grep -v "Delete this line" > default.pot
   $RM tmp.pot
}

#
# Test of the just generated files contain errors
# At the end for the user
#

test_generated_files()
{
    # Testing of the pot file just generated
    $ECHO "#######################################"
    $ECHO "### Checking the validy of the pot file"
    $ECHO "#######################################"
    $ECHO
    msgconv $POT_FILE_NAME.pot >> /dev/null
    if [ $? -eq 1 ] ;then
        $ECHO "###########################################"
        $ECHO "### The $POT_FILE_NAME.pot file is not correct."
        $ECHO "###########################################"
        $ECHO
        $ECHO "### Verify the parsing of the pot file or the ZPTs i18n tags !"
        $ECHO
    else
        $ECHO "#########################"
        $ECHO "### $POT_FILE_NAME [ OK ]"
        $ECHO "#########################"
        $ECHO
    fi
}

###############
#    MAIN
###############


$ECHO "##############################################################"
$ECHO "### make_pot : Parsing the ZPT's and generating the pot file"
$ECHO "##############################################################"
$ECHO

$ECHO $PRODUCTS_DIR

if [ ! -d $PRODUCTS_DIR/OpenPTi18n ]; then
    $ECHO `ls $PRODUCTS_DIR`
    $ECHO "You must install OpenPTi18n in your Products directory"
    exit 1
else
    PARSER_SCRIPT=$PRODUCTS_DIR/OpenPTi18n/i18n_xgettext.py
    # If ask by passing a directory or file in argument
    if [ $# -eq 1 ]; then
        $ECHO "\a### DEBUG MODE ###"
        $ECHO
        if [ -f $1 ];then
            $PYTHON_BIN $PARSER_SCRIPT $1 >> /dev/null
            if [ $? -eq 0 ] ;then
                $ECHO "$1......................[ OK ]"
            else
                $ECHO "$1......................[ FAILED ]"
            fi
        else
            ls $1/*.pt | while read zpt
            do
              $ECHO "##################################"
              $ECHO "PROCESSING FILE : $zpt"
              $ECHO "##################################"
              $PYTHON_BIN $PARSER_SCRIPT $zpt >> /dev/null
              if [ $? -eq 0 ] ;then
                  $ECHO "$zpt......................[ OK ]"
              else
                  $ECHO "$zpt......................[ FAILED ]"
              fi
            done
            $RM default.pot
        fi
    else
    # Checking if we are in the i18n directory
        $ECHO $PWD | grep "i18n" >> /dev/null
        if [ $? -eq 1 ] ; then
            $ECHO "make_pot needs to be executed within the i18n directory"
            $ECHO "You can also use make_pot in debug mode as stated below: "
            $ECHO "make_pot <FILE|DIRECTORY>"
            $ECHO "No pot files are going to be created but you'll know"
            $ECHO "if some of the ZPT's are not correct"
            exit 1
        else
            $ECHO $PWD | grep "i18n/" >> /dev/null
            if [ $? -eq 0 ] ; then
                $ECHO "make_pot needs to be executed within the i18n directory"
                $ECHO "You can also use make_pot in debug mode as stated below: "
                $ECHO "make_pot <FILE|DIRECTORY>"
                $ECHO "No pot files are going to be created but you'll know"
                $ECHO "if some of the ZPT's are not correct"
                exit 1
            else
                user_sure
                if [ $USER_SURE != "yes" ]; then
                    $ECHO "Aborted by user !"
                    exit 1
                else
                    clean_directory
                    SKINS_PATH="../skins/"
                    $ECHO "#################################"
                    $ECHO "### make_pot: Generating pot file"
                    $ECHO "#################################"
                    $ECHO

                    # Generating the default.pot file
                    $PYTHON_BIN $PARSER_SCRIPT $SKINS_PATH >> /dev/null

                    # Renaming by asking the user
                    while [ !$POT_FILE_NAME ]; do
                        query_name
                        if [ $POT_FILE_NAME ]; then
                           # Renaming

                            $MV $PWD/default.pot $PWD/$POT_FILE_NAME.pot
                            touch $PWD/.config.pot
                            touch $PWD/.blacklist_pot
                            $ECHO $PWD/$POT_FILE_NAME.pot > $PWD/.config.pot

                            # Creating the en.po and fr.po for dev
                            $ECHO
                            $ECHO "#######################################"
                            $ECHO "### make_pot: Generating en/fr po files"
                            $ECHO "#######################################"
                            $ECHO
                            $CP $PWD/$POT_FILE_NAME.pot $PWD/en.po
                            $CP $PWD/$POT_FILE_NAME.pot $PWD/fr.po

                            # Generating the custom.pot file
                            touch xx.fake
                            $PYTHON_BIN $PARSER_SCRIPT xx.fake 2> /dev/null
                            $RM xx.fake
                            remove_lines
                            $MV default.pot custom.pot

                            test_generated_files
                            chmod a-w $POT_FILE_NAME.pot

                            $ECHO "######################################################"
                            $ECHO "### Edit now your po files to do the translations"
                            $ECHO
                            $ECHO "### See **update_pos** to merge changes after if needed"
                            $ECHO "### DON'T USE make_pot ANYMORE AFTER YOUR TRANSLATION"
                            $ECHO
                            $ECHO "### If the parsing is not ok it can be because of :"
                            $ECHO "### -> ZPTs i18N tags are not setup properly !"
                            $ECHO "### -> The parser from OpenPTi18n did some errors"
                            $ECHO "### In both situations change the files your self (ZPT)"
                            $ECHO "### and re-launch the application 'til you get"
                            $ECHO "### a correct parsing.then transalte"
                            $ECHO "######################################################"

                            . /usr/local/nuxeo/bin/inc.sh
                            exit 0
                        else
                            continue
                        fi
                    done
                fi
            fi
        fi
    fi
fi
