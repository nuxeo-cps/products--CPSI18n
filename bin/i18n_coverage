#!/usr/bin/python
#
# (C) Copyright 2005 Nuxeo SARL <http://nuxeo.com>
# (C) Copyright 2005 Unilog <http://unilog.com>
# Authors:
# M.-A. Darche <madarche@nuxeo.com>
# G. de la Rochemace <gdelaroch@unilog.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as published
# by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
# 02111-1307, USA.
#
# $Id: BaseBox.py 7293 2005-04-03 23:09:11Z janguenot $
"""Generation of a 'po' translated graphic for all the products.

The dependencies are:
python-gdchart (Python interface to GDChart)
libgdchart-gd1-noxpm (Generate graphs using the GD library)
"""

global detail
detail = 0

import os, os.path, sys, string, re
from optparse import OptionParser

try:
    import gdchart
except ImportError:
    gdchart = None

DEFAULT_GRAPHIC_FILE_PATH = './i18n_coverage.png'

products = [
    'CPSBlog',
    'CPSCalendar',
    'CPSChat',
    'CPSCollector',
    'CPSDefault',
    'CPSDirectory',
    'CPSDocument',
    'CPSForum',
    'CPSIO',
    'CPSNavigation',
    'CPSPortlets',
    'CPSRSS',
    'CPSSchemas',
    'CPSSubscriptions',
    'CPSTypeMaker',
    'CPSWiki',
    ]


def execArgs():
    """Analyze command line arguments.
    """
    global detail
    usage = "usage: %prog [options] [Products directory]"
    parser = OptionParser(usage=usage)

    parser.add_option('-v', '--verbose',
                      action='store_true',
                      dest='verbose',
                      default=False,
                      help="Display more details")

    parser.add_option('--vv', '--vverbose',
                      action='store_true',
                      dest='veryverbose',
                      default=False,
                      help="Display all the details on fr.po and en.po")

    parser.add_option('-o', '--outfile',
                      action="store",
                      type="string",
                      dest="outfile",
                      default=None,
                      help="Destination file for the graphic. "
                      "Default is: %s" % DEFAULT_GRAPHIC_FILE_PATH)

    (options, args) = parser.parse_args()

    path = '.'

    if len(args) != 0:
        path = args[0]

    if options.verbose:
        detail = 1

    if options.veryverbose:
        detail = 2

    if options.outfile:
        makeChart(path, options.outfile)
    else:
        makeChart(path)


def getListPoName(path):
    """Return a list of all language name included in the
    whole CPS products example : ['fr', 'en', ...]
    """
    list_po_name = []
    for product in products:
        po_path = os.path.join(path, '%s/i18n/' % product)
        if os.path.exists(po_path):
            for f in os.listdir(po_path):
                if f.endswith('.po'):
                    file_name = os.path.splitext(f)[0]
                    if file_name not in list_po_name:
                        list_po_name.append(file_name)
        else:
            log("Directory not found: %s" % po_path)
            sys.exit(1)

    return list_po_name



def getPercent(st):
    """Return the percent from a string like this:
       fr: 1952 msgids, 6 fuzzy, 25 empty -> 1921 translated (98% done)
       Return '98'
    """
    temp = st.split("(")[1]
    percent = temp.split("%")[0]

    return int(percent)



def sortFunction(str1, str2):
    """Determine the sort from the percent between two string :
       str1 : fr: 1952 msgids, 6  fuzzy, 25 empty -> 1921 translated (98% done)
       str2 : en: 1952 msgids, 20 fuzzy, 61 empty -> 1871 translated (95% done)
       Return '1'
    """
    if getPercent(str1) < getPercent(str2):
        return 1
    else:
        return -1



# DOTALL: Make the "." special character match any character at all, including a
# newline; without this flag, "." will match anything except a newline.
#
# #, fuzzy
# msgid "CatalogNavigation"
# msgstr "Navigation"
#
FUZZY_REGEXP = re.compile(r'((#, fuzzy\nmsgid "[^\n]+?"\n|#, fuzzy\nmsgid ""' \
                                '\n("[^\n]+"\n)+?)msgstr ")', re.DOTALL)

# msgid "batch_next_x_items"
# msgstr ""
#
# msgid ""
# "Posted by ${item_creator} @ ${item_modification} <block condition=\"info\"> "
# "<span>Label Status</span> <span content=\"info/review_state\" attributes="
# "\"class info/review_state\">Work</span> </block>"
# msgstr ""
#
EMPTY_REGEXP = re.compile(r'((msgid "[^\n]+?"\n|msgid ""' \
                                '\n("[^\n]+"\n)+?)msgstr ""\n\n)', re.DOTALL)

# #.   <span>Go to the
# #.     menu</span>
# #: from ../skins/cps_default/accessibility.pt
# msgid "accessibility_shortcut_menu"
# msgstr "Go to the menu"
#
TRANSLATION_REGEXP = re.compile(r'((\nmsgid "[^\n]+?"\n|msgid ""' \
                                '\n("[^\n]+"\n)+?)msgstr ")', re.DOTALL)



def makeChart(path, export_file_path=DEFAULT_GRAPHIC_FILE_PATH):
    """Generate the graphic thanks to the 'po' and 'pot' files from all Products.
    """
    if not gdchart:
        raise ImportError, 'No module named gdchart'

    global detail
    total = 0
    names = ['Total']
    values = []
    colors = [0x00ff00] # green
    size = (800, 500)

    languages = getListPoName(path)
    nb_languages = len(languages)

    if (detail != 0):
        log("\nNumber of found languages: %s" % (nb_languages))

    list_results = []

    for language in languages:

        list_fuzzy_msgids = []
        list_empty_msgids = []
        list_msgids = []

        # We display only the 'fr.po' and 'en.po' fuzzy and empty msgids because
        # English and French are the two most important language for CPS and
        # also because the other languages have to many fuzzy and empty msgids.
        if (detail == 2):
            if language == 'fr' or language == 'en':
                log('\n\n//////////////// %s ////////////////\n' % language)

        value = 0

        for product in products:
            file_path = os.path.join(path, '%s/i18n/%s.po' % (product, language))
            if os.path.isfile(file_path):
                file = open(file_path, 'r')
                file_content = file.read()
                file.close()


                match_translation = TRANSLATION_REGEXP.findall(file_content)
                for m in match_translation:
                    msgid = m[0].split("\nmsgstr")[0]
                    if msgid not in list_msgids:
                        list_msgids.append(msgid)


                match_fuzzy = FUZZY_REGEXP.findall(file_content)
                for m in match_fuzzy:
                    msgid = m[0].split("\nmsgstr")[0]
                    msgid = msgid.split("fuzzy\n")[1]
                    if msgid not in list_fuzzy_msgids:
                        list_fuzzy_msgids.append(msgid)
                        if (detail == 2):
                            if language == 'fr' or language == 'en':
                                log('%-15s -  fuzzy | %s' % (product, msgid))


                match_empty = EMPTY_REGEXP.findall(file_content)
                for m in match_empty:
                    msgid = m[0].split("\nmsgstr")[0]
                    if msgid not in list_empty_msgids:
                        list_empty_msgids.append(msgid)
                        if (detail == 2):
                            if language == 'fr' or language == 'en':
                                log('%-15s -  empty | %s' % (product, msgid))


        nb_msgid = len(list_msgids)
        if total < nb_msgid:
            total = nb_msgid
            values.append(total)

        nb_fuzzy = len(list_fuzzy_msgids)
        nb_empty = len(list_empty_msgids)
        value = nb_msgid - nb_fuzzy - nb_empty

        names.append(language)
        values.append(value)
        complete = int(value / (total*1.0) * 100)

        # To compute the color_step_coef we can't use a mathematic function,
        # the coefficient moves according to the number of languages.
        # The ratio is neither linear nor exponential.
        # So we need to use the following conditions.
        color_step_coef = 2
        if nb_languages < 4:
            color_step_coef = 7
        elif nb_languages > 3 and nb_languages < 7:
            color_step_coef = 7
        elif nb_languages == 7:
            color_step_coef = 6
        elif nb_languages == 8:
            color_step_coef = 5
        elif nb_languages > 8 and nb_languages < 10:
            color_step_coef = 4

        colors.append(colors[0] * (101 - complete) * color_step_coef)

        list_results.append("%-5s:  %-4s msgids,   %-4s fuzzy,   %-4s empty " \
                            " ->  %-5s translated (%-3d%% done)" % (language,
                            nb_msgid, nb_fuzzy, nb_empty, value, complete))

    if (detail != 0):
        print
        list_results.sort(sortFunction)
        for result in  list_results:
            print result


    # Sort by number of translated messages
    # keeping 'en' always on first position
    z = zip(values[1:], names[1:], colors[1:])
    z.sort(lambda x, y: x[0] == y[0] and cmp((x[0], x[1]), (y[0], y[1])) or
                                         cmp((y[0], y[1]), (x[0], x[1])))
    values = values[0:1]
    names = names[0:1]
    colors = colors[0:1]
    for v,n,c in z:
        values.append(v)
        names.append(n)
        colors.append(c)

    options = {'bg_color': 0xffffff,
               'border': gdchart.GDC_BORDER_ALL,
               'title': 'Translation coverage of all CPSproducts',
               'ext_color': colors,
               'format': gdchart.GDC_PNG,
               }

    gdchart.option(**options)

    gdchart.chart(gdchart.GDC_3DBAR,
                  size,
                  export_file_path,
                  names,
                  values,
                  )

    if (detail != 0):
        log("\nGraphic created: %s\n" % (export_file_path))


def log(message):
    """Log the given message to stderr.
    """
    print >> sys.stderr, message



execArgs()
